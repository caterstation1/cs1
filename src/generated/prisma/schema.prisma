generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GilmoursProduct {
  id          String   @id @default(cuid())
  sku         String   @unique
  brand       String
  description String
  packSize    String
  uom         String
  price       Float
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BidfoodProduct {
  id            String   @id @default(uuid())
  productCode   String   @unique
  brand         String
  description   String
  packSize      String
  ctnQty        String
  uom           String
  qty           Int
  lastPricePaid Float
  totalExGST    Float
  contains      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OtherProduct {
  id          String   @id @default(uuid())
  name        String
  supplier    String
  description String
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Supplier {
  id            String   @id @default(uuid())
  name          String   @unique
  contactName   String?
  contactNumber String?
  contactEmail  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Component {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String
  ingredients    Json
  totalCost      Float
  hasGluten      Boolean  @default(false)
  hasDairy       Boolean  @default(false)
  hasSoy         Boolean  @default(false)
  hasOnionGarlic Boolean  @default(false)
  hasSesame      Boolean  @default(false)
  hasNuts        Boolean  @default(false)
  hasEgg         Boolean  @default(false)
  isVegetarian   Boolean  @default(false)
  isVegan        Boolean  @default(false)
  isHalal        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Product {
  id             String   @id @default(uuid())
  name           String?
  description    String?
  addon          String?
  handle         String?
  meat1          String?
  meat2          String?
  option1        String?
  option2        String?
  serveware      String?
  timerA         Int?
  timerB         Int?
  skuSearch      String?
  variantSku     String?
  variant_title  String?
  ingredients    Json?
  totalCost      Float    @default(0)
  sellingPrice   Float?
  realizedMargin Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // @deprecated - Use ProductCustomData instead
}

model ProductCustomData {
  id          String   @id @default(uuid())
  variantId   String   @unique // Shopify variant_id (e.g., 43025217388799)
  meat1       String?
  meat2       String?
  option1     String?
  option2     String?
  serveware   String?
  timerA      Int?
  timerB      Int?
  ingredients Json? // Your costing/components breakdown
  totalCost   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([variantId])
}

model ProductWithCustomData {
  id        String   @id @default(cuid())
  variantId String   @unique // Shopify variant_id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Shopify data (read-only, synced from Shopify)
  shopifyProductId String
  shopifySku       String?
  shopifyName      String
  shopifyTitle     String
  shopifyPrice     Decimal
  shopifyInventory Int

  // Custom operational data (editable)
  displayName String?
  meat1       String?
  meat2       String?
  timer1      Int?
  timer2      Int?
  option1     String?
  option2     String?
  serveware   Boolean @default(false)
  isDraft     Boolean @default(false)
  ingredients Json? // Components/ingredients breakdown
  totalCost   Float   @default(0)

  // Components relationship (we'll implement this later)
  // components ProductComponent[]

  @@map("product_with_custom_data")
}

model ProductRule {
  id          String  @id @default(cuid())
  name        String // Human-readable rule name
  description String? // Optional description
  isActive    Boolean @default(true)
  priority    Int     @default(0) // Higher priority rules run first

  // Rule conditions (what to match in variant title)
  matchPattern String // Text pattern to match (case-insensitive)
  matchType    String @default("contains") // contains, startsWith, endsWith, exact, regex

  // Rule actions (what to set when matched)
  setDisplayName String?
  setMeat1       String?
  setMeat2       String?
  setTimer1      Int?
  setTimer2      Int?
  setOption1     String?
  setOption2     String?
  setServeware   Boolean?

  // Ingredient rules (new fields)
  setIngredients Json? // Array of ingredients to add
  setTotalCost   Float? // Total cost to set

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_rules")
}

model Staff {
  id                String             @id @default(uuid())
  firstName         String
  lastName          String
  phone             String
  email             String             @unique
  payRate           Float
  accessLevel       String // staff, manager, admin, owner
  isDriver          Boolean            @default(false)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLogin         DateTime?
  password          String?
  resetToken        String?            @unique
  resetTokenExpiry  DateTime?
  shifts            Shift[]
  rosterAssignments RosterAssignment[]
}

// New: Shift Types for roster management
model ShiftType {
  id                String             @id @default(uuid())
  name              String // e.g., "Morning", "Afternoon", "Full Day", "Delivery"
  startTime         String // Format: "HH:MM" (e.g., "07:00")
  endTime           String // Format: "HH:MM" (e.g., "15:00")
  color             String             @default("#3B82F6") // Hex color for UI
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  rosterAssignments RosterAssignment[]
}

// New: Roster Assignments
model RosterAssignment {
  id          String     @id @default(uuid())
  staffId     String
  shiftTypeId String? // Made optional
  startTime   String? // Custom start time (HH:MM format)
  endTime     String? // Custom end time (HH:MM format)
  date        DateTime // Date of the shift
  notes       String? // Optional notes for the shift
  assignedBy  String // Staff ID who made the assignment
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  staff       Staff      @relation(fields: [staffId], references: [id])
  shiftType   ShiftType? @relation(fields: [shiftTypeId], references: [id]) // Made optional

  @@index([staffId])
  @@index([date])
  @@index([shiftTypeId])
}

// Enhanced: Shift model (existing but with new fields)
model Shift {
  id             String          @id @default(uuid())
  staffId        String
  clockIn        DateTime
  clockOut       DateTime?
  totalHours     Float?
  date           DateTime
  mileage        Float? // Kilometers driven
  notes          String? // Staff notes about the shift
  status         String          @default("active") // active, completed, edited
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  staff          Staff           @relation(fields: [staffId], references: [id])
  reimbursements Reimbursement[]

  @@index([staffId])
  @@index([date])
}

// New: Reimbursements
model Reimbursement {
  id          String   @id @default(uuid())
  shiftId     String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shift       Shift    @relation(fields: [shiftId], references: [id])

  @@index([shiftId])
}

model Order {
  id                   String    @id @default(uuid())
  shopifyId            String    @unique
  orderNumber          Int
  createdAt            DateTime
  updatedAt            DateTime
  processedAt          DateTime?
  cancelledAt          DateTime?
  closedAt             DateTime?
  totalPrice           Float
  subtotalPrice        Float
  totalTax             Float
  currency             String
  financialStatus      String
  fulfillmentStatus    String?
  tags                 String?
  note                 String?
  customerEmail        String
  customerFirstName    String
  customerLastName     String
  customerPhone        String?
  shippingAddress      Json?
  billingAddress       Json?
  lineItems            Json
  source               String    @default("shopify")
  hasLocalEdits        Boolean   @default(false)
  syncedAt             DateTime  @default(now())
  dbCreatedAt          DateTime  @default(now())
  dbUpdatedAt          DateTime  @updatedAt
  noteAttributes       Json?
  deliveryDate         String?
  deliveryTime         String?
  pickupDate           String?
  pickupTime           String?
  deliveryInstructions String?
  travelTime           String?
  leaveTime            String?
  driverId             String?
  isDispatched         Boolean   @default(false)
  lastSmsSent          DateTime?
  smsHistory           Json?
  internalNote         String?

  @@index([orderNumber])
  @@index([createdAt])
  @@index([customerEmail])
}

model ShopifyOrder {
  id            String       @id
  rawData       Json // Complete Shopify order data
  syncedAt      DateTime
  parsedOrder   ParsedOrder?
  parsedOrderId String?      @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ParsedOrder {
  id              String           @id
  shopifyOrder    ShopifyOrder     @relation(fields: [shopifyOrderId], references: [id])
  shopifyOrderId  String           @unique
  orderNumber     String
  deliveryTime    String // Format: "HH:MM"
  deliveryDate    DateTime
  deliveryAddress Json // Structured address data
  customerName    String
  customerCompany String?
  customerPhone   String
  orderNotes      String?
  travelTime      Int? // In minutes
  leaveTime       String? // Format: "HH:MM"
  driverId        String?
  isDispatched    Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lineItems       ParsedLineItem[]
}

model ParsedLineItem {
  id            String      @id
  parsedOrder   ParsedOrder @relation(fields: [parsedOrderId], references: [id])
  parsedOrderId String
  sku           String
  title         String
  quantity      Int
  price         String
  // Product details from our database
  handle        String?
  meat1         String?
  meat2         String?
  serveware     String?
  ovenTimer1    Int?
  ovenTimer2    Int?
  option1       String?
  option2       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([parsedOrderId])
  @@index([sku])
}
