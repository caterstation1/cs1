
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GilmoursProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  brand: 'brand',
  description: 'description',
  packSize: 'packSize',
  uom: 'uom',
  price: 'price',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BidfoodProductScalarFieldEnum = {
  id: 'id',
  productCode: 'productCode',
  brand: 'brand',
  description: 'description',
  packSize: 'packSize',
  ctnQty: 'ctnQty',
  uom: 'uom',
  qty: 'qty',
  lastPricePaid: 'lastPricePaid',
  totalExGST: 'totalExGST',
  contains: 'contains',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtherProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  supplier: 'supplier',
  description: 'description',
  cost: 'cost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  contactNumber: 'contactNumber',
  contactEmail: 'contactEmail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComponentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ingredients: 'ingredients',
  totalCost: 'totalCost',
  hasGluten: 'hasGluten',
  hasDairy: 'hasDairy',
  hasSoy: 'hasSoy',
  hasOnionGarlic: 'hasOnionGarlic',
  hasSesame: 'hasSesame',
  hasNuts: 'hasNuts',
  hasEgg: 'hasEgg',
  isVegetarian: 'isVegetarian',
  isVegan: 'isVegan',
  isHalal: 'isHalal',
  isComponentListItem: 'isComponentListItem',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  addon: 'addon',
  handle: 'handle',
  meat1: 'meat1',
  meat2: 'meat2',
  option1: 'option1',
  option2: 'option2',
  serveware: 'serveware',
  timerA: 'timerA',
  timerB: 'timerB',
  skuSearch: 'skuSearch',
  variantSku: 'variantSku',
  variant_title: 'variant_title',
  ingredients: 'ingredients',
  totalCost: 'totalCost',
  sellingPrice: 'sellingPrice',
  realizedMargin: 'realizedMargin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCustomDataScalarFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  meat1: 'meat1',
  meat2: 'meat2',
  option1: 'option1',
  option2: 'option2',
  serveware: 'serveware',
  timerA: 'timerA',
  timerB: 'timerB',
  ingredients: 'ingredients',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductWithCustomDataScalarFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shopifyProductId: 'shopifyProductId',
  shopifySku: 'shopifySku',
  shopifyName: 'shopifyName',
  shopifyTitle: 'shopifyTitle',
  shopifyPrice: 'shopifyPrice',
  shopifyInventory: 'shopifyInventory',
  displayName: 'displayName',
  meat1: 'meat1',
  meat2: 'meat2',
  timer1: 'timer1',
  timer2: 'timer2',
  option1: 'option1',
  option2: 'option2',
  serveware: 'serveware',
  isDraft: 'isDraft',
  ingredients: 'ingredients',
  totalCost: 'totalCost'
};

exports.Prisma.ProductRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  priority: 'priority',
  matchPattern: 'matchPattern',
  matchType: 'matchType',
  setDisplayName: 'setDisplayName',
  setMeat1: 'setMeat1',
  setMeat2: 'setMeat2',
  setTimer1: 'setTimer1',
  setTimer2: 'setTimer2',
  setOption1: 'setOption1',
  setOption2: 'setOption2',
  setServeware: 'setServeware',
  setIngredients: 'setIngredients',
  setTotalCost: 'setTotalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  payRate: 'payRate',
  accessLevel: 'accessLevel',
  isDriver: 'isDriver',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  password: 'password',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry'
};

exports.Prisma.ShiftTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startTime: 'startTime',
  endTime: 'endTime',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RosterAssignmentScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  shiftTypeId: 'shiftTypeId',
  startTime: 'startTime',
  endTime: 'endTime',
  date: 'date',
  notes: 'notes',
  assignedBy: 'assignedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShiftScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  clockIn: 'clockIn',
  clockOut: 'clockOut',
  totalHours: 'totalHours',
  date: 'date',
  mileage: 'mileage',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReimbursementScalarFieldEnum = {
  id: 'id',
  shiftId: 'shiftId',
  amount: 'amount',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  shopifyId: 'shopifyId',
  orderNumber: 'orderNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  processedAt: 'processedAt',
  cancelledAt: 'cancelledAt',
  closedAt: 'closedAt',
  totalPrice: 'totalPrice',
  subtotalPrice: 'subtotalPrice',
  totalTax: 'totalTax',
  currency: 'currency',
  financialStatus: 'financialStatus',
  fulfillmentStatus: 'fulfillmentStatus',
  tags: 'tags',
  note: 'note',
  customerEmail: 'customerEmail',
  customerFirstName: 'customerFirstName',
  customerLastName: 'customerLastName',
  customerPhone: 'customerPhone',
  shippingAddress: 'shippingAddress',
  billingAddress: 'billingAddress',
  lineItems: 'lineItems',
  source: 'source',
  hasLocalEdits: 'hasLocalEdits',
  syncedAt: 'syncedAt',
  dbCreatedAt: 'dbCreatedAt',
  dbUpdatedAt: 'dbUpdatedAt',
  noteAttributes: 'noteAttributes',
  deliveryDate: 'deliveryDate',
  deliveryTime: 'deliveryTime',
  pickupDate: 'pickupDate',
  pickupTime: 'pickupTime',
  deliveryInstructions: 'deliveryInstructions',
  travelTime: 'travelTime',
  leaveTime: 'leaveTime',
  driverId: 'driverId',
  isDispatched: 'isDispatched',
  lastSmsSent: 'lastSmsSent',
  smsHistory: 'smsHistory',
  internalNote: 'internalNote'
};

exports.Prisma.ShopifyOrderScalarFieldEnum = {
  id: 'id',
  rawData: 'rawData',
  syncedAt: 'syncedAt',
  parsedOrderId: 'parsedOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParsedOrderScalarFieldEnum = {
  id: 'id',
  shopifyOrderId: 'shopifyOrderId',
  orderNumber: 'orderNumber',
  deliveryTime: 'deliveryTime',
  deliveryDate: 'deliveryDate',
  deliveryAddress: 'deliveryAddress',
  customerName: 'customerName',
  customerCompany: 'customerCompany',
  customerPhone: 'customerPhone',
  orderNotes: 'orderNotes',
  travelTime: 'travelTime',
  leaveTime: 'leaveTime',
  driverId: 'driverId',
  isDispatched: 'isDispatched',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParsedLineItemScalarFieldEnum = {
  id: 'id',
  parsedOrderId: 'parsedOrderId',
  sku: 'sku',
  title: 'title',
  quantity: 'quantity',
  price: 'price',
  handle: 'handle',
  meat1: 'meat1',
  meat2: 'meat2',
  serveware: 'serveware',
  ovenTimer1: 'ovenTimer1',
  ovenTimer2: 'ovenTimer2',
  option1: 'option1',
  option2: 'option2',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  GilmoursProduct: 'GilmoursProduct',
  BidfoodProduct: 'BidfoodProduct',
  OtherProduct: 'OtherProduct',
  Supplier: 'Supplier',
  Component: 'Component',
  Product: 'Product',
  ProductCustomData: 'ProductCustomData',
  ProductWithCustomData: 'ProductWithCustomData',
  ProductRule: 'ProductRule',
  Staff: 'Staff',
  ShiftType: 'ShiftType',
  RosterAssignment: 'RosterAssignment',
  Shift: 'Shift',
  Reimbursement: 'Reimbursement',
  Order: 'Order',
  ShopifyOrder: 'ShopifyOrder',
  ParsedOrder: 'ParsedOrder',
  ParsedLineItem: 'ParsedLineItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
