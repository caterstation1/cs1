generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model GilmoursProduct {
  id          String   @id @default(cuid())
  sku         String   @unique
  brand       String
  description String
  packSize    String
  uom         String
  price       Float
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BidfoodProduct {
  id            String   @id @default(uuid())
  productCode   String   @unique
  brand         String
  description   String
  packSize      String
  ctnQty        String
  uom           String
  qty           Int
  lastPricePaid Float
  totalExGST    Float
  contains      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OtherProduct {
  id          String   @id @default(uuid())
  name        String
  supplier    String
  description String
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Supplier {
  id            String   @id @default(uuid())
  name          String   @unique
  contactName   String?
  contactNumber String?
  contactEmail  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Component {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String
  ingredients    Json
  totalCost      Float
  hasGluten      Boolean  @default(false)
  hasDairy       Boolean  @default(false)
  hasSoy         Boolean  @default(false)
  hasOnionGarlic Boolean  @default(false)
  hasSesame      Boolean  @default(false)
  hasNuts        Boolean  @default(false)
  hasEgg         Boolean  @default(false)
  isVegetarian   Boolean  @default(false)
  isVegan        Boolean  @default(false)
  isHalal        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Product {
  id             String   @id @default(uuid())
  name           String?
  description    String?
  addon          String?
  handle         String?
  meat1          String?
  meat2          String?
  option1        String?
  option2        String?
  serveware      String?
  timerA         Int?
  timerB         Int?
  skuSearch      String?
  variantSku     String?
  ingredients    Json?
  totalCost      Float    @default(0)
  sellingPrice   Float?
  realizedMargin Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Staff {
  id               String    @id @default(uuid())
  firstName        String
  lastName         String
  phone            String
  email            String    @unique
  payRate          Float
  accessLevel      String
  isDriver         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLogin        DateTime?
  password         String?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  shifts           Shift[]
}

model Shift {
  id         String    @id @default(uuid())
  staffId    String
  clockIn    DateTime
  clockOut   DateTime?
  totalHours Float?
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  staff      Staff     @relation(fields: [staffId], references: [id])

  @@index([staffId])
  @@index([date])
}

model ShopifyOrder {
  id                String           @id @default(uuid())
  shopifyId         String           @unique
  orderNumber       String
  customerId        String
  customer          ShopifyCustomer  @relation(fields: [customerId], references: [id])
  email             String
  phone             String?
  deliveryDate      DateTime
  deliveryTime      String?
  deliveryAddress   String
  deliveryNotes     String?
  status            String
  totalPrice        Float
  lineItems         ShopifyLineItem[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  lastSyncedAt      DateTime         @default(now())
  isModified        Boolean          @default(false)
  modifications     Json?

  @@index([deliveryDate])
  @@index([shopifyId])
}

model ShopifyLineItem {
  id              String        @id @default(uuid())
  shopifyId       String        @unique
  orderId         String
  order           ShopifyOrder  @relation(fields: [orderId], references: [id])
  productId       String
  productTitle    String
  variantId       String?
  variantTitle    String?
  quantity        Int
  price           Float
  modifications   Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([orderId])
}

model ShopifyCustomer {
  id              String          @id @default(uuid())
  shopifyId       String          @unique
  email           String
  firstName       String?
  lastName        String?
  phone           String?
  defaultAddress  String?
  orders          ShopifyOrder[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([shopifyId])
}
